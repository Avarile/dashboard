{"version":3,"file":"static/js/450.f179b169.chunk.js","mappings":"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","sources":["data/api.controller.ts","data/api.service.ts","utils/ENVCONFIG.ts","utils/commomComponents/Notification.tsx","utils/interfaces.ts","utils/utilFuncs.ts"],"sourcesContent":["// Universal Api controller\r\n//\r\nimport axios from \"axios\";\r\nimport Storage from \"@SRC/data/session.controller\";\r\nimport { setIsloading, setError } from \"@DATA/dataSlices/isloading.slice\";\r\nimport Notification from \"@SRC/utils/commomComponents/Notification\";\r\nimport { store } from \"./dataStore/store.redux\";\r\n\r\n// about the @SRC\r\n// first in webpack.config.js\r\n// find resolve/alias add \"@SRC\": path.resolve(\"src\"),\r\n\r\nconst { NODE_ENV } = process.env; // retrive env values from process.env\r\n//\r\n\r\nclass Request {\r\n  axiosInstance: any;\r\n\r\n  constructor() {\r\n    // initilize a singleton axios instance to perform all the api actions\r\n    this.axiosInstance = axios.create({\r\n      timeout: 10000,\r\n      baseURL: \"\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json;charset=utf-8\",\r\n        \"X-Requested-Width\": \"XMLHttpRequest\",\r\n      },\r\n    });\r\n    this.interceptRequest(); // intercept all request and response\r\n    this.interceptResponse();\r\n  }\r\n\r\n  private setIsloading(status: boolean): void {\r\n    store.dispatch(setIsloading(status));\r\n  }\r\n\r\n  private setError(error: any): void {\r\n    store.dispatch(setError(error));\r\n  }\r\n\r\n  private interceptRequest() {\r\n    this.axiosInstance.interceptors.request.use((config: any) => {\r\n      config.headers[\"token\"] = Storage.getCachedDate(\"token\") || \"\"; // token is either the access token or just empty string\r\n      if (config.url.includes(\"/upload\")) {\r\n        config.headers[\"Content-Type\"] = \"multipart/form-data\";\r\n      }\r\n      return config;\r\n    });\r\n  }\r\n\r\n  private interceptResponse() {\r\n    this.axiosInstance.interceptors.response.use((response: any) => {\r\n      if (response?.data) {\r\n        const { code = \"200\" } = response.data; // NOTE: not all backend is restful\r\n        if (code === \"200\" || response.statusText.toLocalLowerCase() === \"ok\") {\r\n          return Promise.resolve(response);\r\n        } else {\r\n          return Promise.reject(response);\r\n        }\r\n      } else {\r\n        // shall I return a error component here????\r\n        return Promise.reject(\"no data\");\r\n      }\r\n    }),\r\n      (error: any) => {\r\n        if (error.response) {\r\n          const { status = \"\" } = error.response; // set the dafault values of status to \"\", incase there is a error.response.status = undefined\r\n          if (error.response.status === 401) {\r\n            // window.history.push(LOGIN) // if token is not valid or avaliable or login failed, jump to login page\r\n          }\r\n          return Promise.reject(error);\r\n        } else {\r\n          // todo: shall I call a component to show the warning or message?\r\n          return Promise.reject(\"request timeout, please refresh to try again\");\r\n        }\r\n      };\r\n  }\r\n\r\n  /**\r\n   * get data\r\n   * @param url\r\n   * @param params\r\n   * @returns {Promise}\r\n   */\r\n  public get(url: string, params = {}) {\r\n    return new Promise((resolve, reject) => {\r\n      this.setIsloading(true);\r\n      this.axiosInstance\r\n        .get(url, {\r\n          params: params,\r\n        })\r\n        .then((response: any) => {\r\n          resolve(response.data);\r\n        })\r\n        .catch((error: any) => {\r\n          this.setError(error);\r\n          Notification({ type: \"warning\", message: \"Unable to acquire data, please check internet connection\", messageTarget: \"\" });\r\n          reject(error);\r\n        })\r\n        .finally(this.setIsloading(false));\r\n    });\r\n  }\r\n\r\n  /**\r\n   * post data\r\n   * @param url\r\n   * @param params\r\n   * @returns {Promise}\r\n   */\r\n  public post(url: string, params = {}, config: { [key: string]: any } = {}, notification: string) {\r\n    return new Promise((resolve, reject) => {\r\n      this.setIsloading(true);\r\n      if (typeof params === \"object\") {\r\n        if (params.constructor.name === \"FormData\") {\r\n          config[\"Content-Type\"] = \"multipart/form-data\";\r\n        }\r\n      }\r\n      this.axiosInstance\r\n        .post(url, params, config)\r\n        .then((response: any) => {\r\n          resolve(response.data);\r\n          Notification({ type: \"success\", messageTarget: `${notification} is successfully created` });\r\n        })\r\n        .catch((error: any) => {\r\n          this.setError(error);\r\n          Notification({ type: \"warning\", messageTarget: `${notification} creation failed, please try again later!` });\r\n          reject(error);\r\n        })\r\n        .finally(this.setIsloading(false));\r\n    });\r\n  }\r\n\r\n  /**\r\n   * patch\r\n   * @param url\r\n   * @param params\r\n   * @returns {Promise}\r\n   */\r\n  public patch(url: string, params: {}, notification: string) {\r\n    return new Promise((resolve, reject) => {\r\n      this.setIsloading(true);\r\n      this.axiosInstance\r\n        .patch(url, params)\r\n        .then((response: any) => {\r\n          resolve(response.data);\r\n          \r\n          Notification({ type: \"success\", messageTarget: `${notification} successfully updated` });\r\n        })\r\n        .catch((error: any) => {\r\n          this.setError(error);\r\n          Notification({ type: \"warning\", messageTarget: `${notification} update failed, please try again later` });\r\n          reject(error);\r\n        })\r\n        .finally(this.setIsloading(false));\r\n    });\r\n  }\r\n\r\n  /**\r\n   * put\r\n   * @param url\r\n   * @param params\r\n   * @returns {Promise}\r\n   */\r\n  public put(url: string, params: {}, notification: string) {\r\n    return new Promise((resolve, reject) => {\r\n      this.setIsloading(true);\r\n      this.axiosInstance\r\n        .put(url, params)\r\n        .then((response: any) => {\r\n          resolve(response.data);\r\n          Notification({ type: \"success\", messageTarget: `${notification} is succefully updated` });\r\n        })\r\n        .catch((error: any) => {\r\n          Notification({ type: \"warning\", messageTarget: `${notification} update failed, please try again later` });\r\n          reject(error);\r\n        })\r\n        .finally(this.setIsloading(false));\r\n    });\r\n  }\r\n}\r\n\r\nexport default new Request(); // export the singleton\r\n","import Request from \"@DATA/api.controller\";\r\nimport envSwitch from \"@SRC/utils/ENVCONFIG\";\r\nimport { refineQueryString, debounce, deduplicateArray, timeStamp } from \"@SRC/utils/utilFuncs\";\r\nimport qs from \"query-string\";\r\nimport { store } from \"./dataStore/store.redux\";\r\nimport { setSelectedItems, setPrice, setOrderCustomer, setOrderShippingInfo } from \"@DATA/dataSlices/order.slice\";\r\nimport { IUser, IProduct, ILogisticSearchParams, ELogisticStatus, IlogisticInfo, IOrderProduct, IOrderStatusCombined } from \"src/utils/interfaces\";\r\nimport Notification from \"@SRC/utils/commomComponents/Notification\";\r\nimport { FormInstance } from \"antd\";\r\n\r\nconst dispatch = store.dispatch;\r\n\r\nconst env = envSwitch(\"dep\");\r\n\r\nexport const generateOrder = async (payload: object) => {\r\n  await Request.post(`${env.dbUri}/orders`, payload, {}, \"order\");\r\n};\r\n\r\nexport const getOrderByParams = (searchParams: Partial<IOrderStatusCombined>, setData: Function, setLoadingStatus: Function, formInstance?: FormInstance) => {\r\n  debugger;\r\n  // init the search, loading starts\r\n  setLoadingStatus(true);\r\n\r\n  const tempFunc = async () => {\r\n    await Request.get(`${env.dbUri}/orders?${qs.stringify(refineQueryString(searchParams))}`)\r\n      .then((response: any) => {\r\n        setData(response);\r\n      })\r\n      .finally(() => {\r\n        setLoadingStatus(false);\r\n      });\r\n  };\r\n  tempFunc();\r\n};\r\n\r\nexport const getOrdersById = async (searchParams: { orderId: string }) => {\r\n  return await Request.get(`${env.dbUri}/orders?${qs.stringify(refineQueryString(searchParams))}`);\r\n};\r\n\r\n/**\r\n * beware that this func is specifically designed for Json-server, if the backend is deployed, this should change.\r\n */\r\nexport const updateOrderForPayment = async (\r\n  orderId: number,\r\n  paymentDetail: { method: \"cash\" | \"debitCard\" | \"creditCard\" | \"paypal\" | \"3rdParty\"; amount: number; referenceCodes: string; description: string }\r\n) => {\r\n  Request.put(`${env.dbUri}/orders/${orderId}`, paymentDetail, \"Payment\");\r\n};\r\n\r\n/**\r\n * beware that this func is specifically designed for Json-server, if the backend is deployed, this should change.\r\n */\r\nexport const updateOrderForFabrication = async (\r\n  orderId: number,\r\n  fabricationStatus: \"pending\" | \"machineProcessing\" | \"machineProcessFinished\" | \"powderCoating\" | \"powderCoatingFinished\" | \"waitingForInstallation\" | \"installing\" | \"ready\"\r\n) => {\r\n  Request.put(`${env.dbUri}/orders/${orderId}`, fabricationStatus, \"Fabrication Status\");\r\n};\r\n\r\nexport const updateOrderForLogistic = async (orderId: number, logisticStatus: ELogisticStatus) => {\r\n  Request.put(`${env.dbUri}/orders/${orderId}`, logisticStatus, \"Logistic Status\");\r\n};\r\n\r\nexport const updateOrderForLogisticInfo = async (orderId: number, logisticInfo: IlogisticInfo) => {\r\n  Request.put(`${env.dbUri}/orders/${orderId}`, logisticInfo, \"LogisticInfo\");\r\n};\r\n\r\nexport const getProductBySku = async (searchParams: { sku: string }) => {\r\n  return await Request.get(`${env.dbUri}/products?${qs.stringify(refineQueryString(searchParams))}`).then((response: any) => {\r\n    console.log(response);\r\n  });\r\n};\r\n\r\nexport const getClientsByParams = (\r\n  params: { email: string } | { mobile: number },\r\n  loadingStatus: any,\r\n  setLoadingStatus: any,\r\n  formInstance: any,\r\n  setUiController: any,\r\n  uiController: { userInfo: any; userCreateOrEditSwitch: any; shippingInfo: any }\r\n) => {\r\n  setLoadingStatus({\r\n    ...loadingStatus,\r\n    userInfo: true,\r\n  });\r\n  const tempFunc = async () => {\r\n    await Request.get(`${env.dbUri}/clients?${qs.stringify(refineQueryString(params))}`)\r\n      .then((response: any) => {\r\n        if (response.length > 0) {\r\n          setUiController({\r\n            ...uiController,\r\n            userCreateOrEditSwitch: true,\r\n          });\r\n\r\n          const { name, id, email, mobile, vip, address, postcode } = response[0];\r\n          formInstance.setFieldsValue({\r\n            client: {\r\n              name: name,\r\n              email: email,\r\n              mobile: mobile,\r\n              vip: vip,\r\n              address: address,\r\n              postcode: postcode,\r\n              id: id,\r\n            },\r\n          });\r\n        } else {\r\n          formInstance.setFieldsValue({\r\n            client: {\r\n              name: null,\r\n              email: null,\r\n              mobile: null,\r\n              vip: null,\r\n              address: null,\r\n              postcode: null,\r\n              id: null,\r\n            },\r\n          });\r\n        }\r\n      })\r\n      .finally(() => {\r\n        // setUiController({\r\n        //   ...uiController,\r\n        //   userCreateOrEditSwitch: false,\r\n        // })\r\n        setLoadingStatus({\r\n          ...loadingStatus,\r\n          userInfo: false,\r\n        });\r\n      });\r\n  };\r\n\r\n  const debouncedTempFunc = debounce(tempFunc, 3000);\r\n  debouncedTempFunc();\r\n};\r\n\r\n/**\r\n * Update exiting user Info or Create new user\r\n *\r\n */\r\nexport const manipulateUserInfo = async (payload: IUser, funcSwitch: \"create\" | \"update\") => {\r\n  let tempPayload;\r\n  if (funcSwitch === \"update\") {\r\n    tempPayload = { ...payload, updatedAt: timeStamp() };\r\n    await Request.put(`${env.dbUri}/clients/${tempPayload.id}}`, payload, `User Info${payload.name}`);\r\n  }\r\n  if (funcSwitch === \"create\") {\r\n    tempPayload = { ...payload, createdAt: timeStamp() };\r\n    await Request.post(`${env.dbUri}/clients`, payload, {}, `user: ${payload.name}`);\r\n  } else return Notification({ type: \"error\", message: \"User Component Error\" });\r\n};\r\n\r\nexport const searchProductBySku = async (\r\n  sku: string,\r\n  setLoadingStatus: any,\r\n  loadingStatus: {\r\n    userInfo: boolean;\r\n    shippingInfo: boolean;\r\n    productSearch: boolean;\r\n  },\r\n  formInstance: any,\r\n  columnIndex: number\r\n) => {\r\n  setLoadingStatus({\r\n    ...loadingStatus,\r\n    productSearch: true,\r\n  });\r\n  // console.log(sku)\r\n\r\n  await Request.get(`${env.dbUri}/products?sku=${sku}`)\r\n\r\n    .then((response: any) => {\r\n      debugger;\r\n      let currentFormValue = formInstance.getFieldValue(\"products\"); // accquire entire list of items\r\n      if (response.length > 0) {\r\n        // console.log(response[0])\r\n\r\n        const { name, id, size, price, powdercoatingPrice, installationPrice, currentInStock } = response[0]; // accquire the response item\r\n        const currentColumn = {\r\n          id: id,\r\n          name: name,\r\n          size: size,\r\n          price: price,\r\n          pcPrice: powdercoatingPrice,\r\n          installPrice: installationPrice,\r\n          currentInStock: currentInStock,\r\n        };\r\n        const changedFormValue = currentFormValue.map((item: any, index: number) => {\r\n          if (index === columnIndex) {\r\n            item.name = currentColumn.name;\r\n            item.id = currentColumn.id;\r\n            item.size = currentColumn.size;\r\n            item.price = currentColumn.price;\r\n            item.pcPrice = currentColumn.pcPrice;\r\n            item.installPrice = currentColumn.installPrice;\r\n            item.currentInStock = currentColumn.currentInStock;\r\n            return item;\r\n          } else return item;\r\n        });\r\n\r\n        formInstance.setFieldsValue({ products: changedFormValue });\r\n      } else {\r\n        return null;\r\n      }\r\n    })\r\n    .finally(() => {\r\n      setTimeout(() => {\r\n        setLoadingStatus({\r\n          ...loadingStatus,\r\n          productSearch: false,\r\n        });\r\n      }, 1000);\r\n    });\r\n};\r\n\r\n/**\r\n * to be called in the Addpayment component\r\n * @param product\r\n */\r\nexport const deductProduct = async (product: IOrderProduct) => {\r\n  const payload = {\r\n    ...product,\r\n    currentInStock: product.currentInStock - 1,\r\n  };\r\n\r\n  await Request.put(`${env.dbUri}/products/${product.id}`, payload, `${product.name}`);\r\n};\r\n\r\nexport const AddToWatchingList = async (orderNumber: number, checked: boolean) => {\r\n  await Request.patch(`${env.dbUri}/orders/${orderNumber}`, { checked: !checked }, `OrderNumber: ${orderNumber}`);\r\n};\r\n\r\n// only works for Jons server: the sytax currentInStock_gte=1&currentInStock_lte=5 only works for json server\r\nexport const getShortageItems = async (setData: Function) => {\r\n  const searchParams = `${env.dbUri}/products?currentInStock_gte=1&currentInStock_lte=5`;\r\n  await Request.get(searchParams).then((response: any) => {\r\n    setData(response);\r\n  });\r\n};\r\n\r\nexport const getProductData = async (queryData: { name?: string; sku?: string } = {}) => {\r\n  return await Request.get(`${env.dbUri}/products?${qs.stringify(refineQueryString(queryData))}`);\r\n};\r\n\r\nexport const putProductData = async (url: string, payload: object) => {\r\n  return await Request.put(`${env.dbUri}/products/${url}`, payload, \"Product\");\r\n};\r\n\r\nexport const createNewProduct = (payload: object) => {\r\n  return Request.post(`${env.dbUri}/products`, payload, {}, \"Product\");\r\n};\r\n\r\nexport const getProductDataDeposits = async (queryData: { name?: string; sku?: string } = {}) => {\r\n  return await Request.get(`${env.dbUri}/products?${qs.stringify(refineQueryString(queryData))}`);\r\n};\r\n","const ENVCONFIG = {\r\n  development: {\r\n    dbUri: \"http://localhost:3001\",\r\n  },\r\n  deployment: {\r\n    dbUri: \"http://137.147.94.100:3001\",\r\n  },\r\n};\r\n\r\ninterface IEnvConfig {\r\n  development: Object;\r\n  deployment: Object;\r\n}\r\nconst envSwitch = (switchSelector: \"dev\" | \"dep\") => {\r\n  if (switchSelector === \"dev\") {\r\n    return ENVCONFIG.development;\r\n  }\r\n  if (switchSelector === \"dep\") {\r\n    return ENVCONFIG.deployment;\r\n  } else {\r\n    throw new Error(\"Wrong Env selection\");\r\n  }\r\n};\r\n\r\nexport default envSwitch;\r\n","import React from \"react\"\r\nimport \"antd/dist/antd.css\"\r\nimport { message } from \"antd\"\r\n\r\nexport interface IConfig {\r\n  type: \"success\" | \"error\" | \"warning\"\r\n  message?: string\r\n  messageTarget?: string\r\n}\r\n/**\r\n * notificationControll messageTarget is a token to represent what subject is about this message.\r\n * @param config: {variant: string, message: string, type: notificationType  } || undefined\r\n * @returns {Notification}\r\n */\r\nconst Notification = (config: IConfig) => {\r\n  let paylaodMessage\r\n  if (config.message) {\r\n    paylaodMessage = config.message\r\n  } else {\r\n    paylaodMessage = config.messageTarget\r\n  }\r\n  return message[config.type](paylaodMessage)\r\n}\r\n\r\nexport default Notification\r\n","export interface IProduct {\r\n  id: number;\r\n  name: string;\r\n  type: \"canopy\" | \"tray\" | \"toolbox\" | \"accessories\" | \"4x4\" | \"servicebody\" | \"tubcanopy\";\r\n  subtype: \"no subtype\" | \"dogbox\" | \"drawbar\" | \"gullwing\";\r\n  detail: \"detailType1\" | \"detailType2\" | \"detailType3\";\r\n  sku: string;\r\n  length: number;\r\n  size: string;\r\n  currentInStock: number;\r\n  price: number;\r\n  powdercoatingPrice: number;\r\n  installationPrice: number;\r\n  desc: string;\r\n  spec: string;\r\n  updateLog: string;\r\n}\r\n\r\nexport interface IOrderProduct {\r\n  id: number;\r\n  sku: string;\r\n  name: string;\r\n  size: string;\r\n  price: number;\r\n  pcPrice: number;\r\n  installPrice: number;\r\n  currentInStock: number;\r\n}\r\n\r\nexport interface IUser {\r\n  id: number;\r\n  name: string;\r\n  email: string;\r\n  mobile: string;\r\n  vip: boolean;\r\n  address: string;\r\n  postcode: number;\r\n}\r\n\r\nexport interface IOrderDetail {\r\n  clientId: number;\r\n  clientName: string;\r\n  clientEmail: string;\r\n  clientVip: string;\r\n  clientAddress: string;\r\n  clientPostcode: number;\r\n  checked: boolean;\r\n  shippingAddress: string;\r\n  shippingPostcode: number;\r\n  shippingShippingFee: number;\r\n  priceItemPrice: number;\r\n  pricepcPrice: number;\r\n  priceinstallPrice: number;\r\n  pricetotalAmount: number;\r\n  pricedepositPayed: number;\r\n  createdAt: Date;\r\n  createdBy: string;\r\n  updatedAt: Date;\r\n  updatedBy: string;\r\n  orderStatus: string;\r\n  fabricationStatus: EfabricationStatus;\r\n  logisticStatus: ELogisticStatus;\r\n  logisticProvider: ELogisticProvider | null;\r\n  pickupAt: Date | null;\r\n  orderPayed: number;\r\n  paymentDetail: Array<any>;\r\n  balanceDue: number;\r\n  id: number;\r\n}\r\n\r\nexport enum EfabricationStatus {\r\n  pending = \"pending\",\r\n  machineProcessing = \"machineProcessing\",\r\n  machineProcessFinished = \"machineProcessFinished\",\r\n  powderCoating = \"powderCoating\",\r\n  powderCoatingFinished = \"powderCoatingFinished\",\r\n  waitingForInstallation = \"waitingForInstallation\",\r\n  installing = \"installing\",\r\n  ready = \"ready\",\r\n}\r\n\r\nexport interface IFabrication {\r\n  fabricationStatus: EfabricationStatus;\r\n}\r\n\r\nexport enum ELogisticStatus {\r\n  waitingForCarrier = \"waitingForCarrier\",\r\n  pickupAlready = \"pickupAlready\",\r\n  delivering = \"delivering\",\r\n  delivered = \"delivered\",\r\n  cannotDeliver = \"cannotDeliver\",\r\n  returningToVender = \"returningToVender\",\r\n  returnedItemArrived = \"returnedItemArrived\",\r\n  itemDamagedInTransport = \"itemDamagedInTransport\",\r\n}\r\n\r\nexport enum ELogisticProvider {\r\n  AustralianPost = \"Australian Post\",\r\n  BigPost = \"Big Post\",\r\n  FastWay = \"FastWay\",\r\n}\r\n\r\nexport interface ILogisticSearchParams {\r\n  logisticStatus: ELogisticStatus | undefined;\r\n  logisticProvider: ELogisticProvider | undefined;\r\n  pickupAt: \"\" | undefined;\r\n  id: number | undefined;\r\n}\r\n\r\nexport interface IOrderStatusCombined extends ILogisticSearchParams, IFabrication {\r\n  checked: boolean;\r\n}\r\n\r\nexport interface IlogisticInfo {\r\n  logisticProvider: string;\r\n  trackingNumber: string;\r\n  pickupAt: Date;\r\n  logisticSideNote: string;\r\n}\r\n\r\nexport enum EPaymentStatus {\r\n  pending = \"pending\",\r\n  partiallyPayed = \"partiallyPayed\",\r\n  fullyPayed = \"fullyPayed\",\r\n}\r\n\r\nexport interface IOrderSearchParams {\r\n  logisticStatus: ELogisticStatus;\r\n  fabricationStatus: EfabricationStatus;\r\n  orderStatus: EPaymentStatus;\r\n  id: number;\r\n  dateRange: string;\r\n}\r\n\r\nexport interface IClient {\r\n  id: string;\r\n  name: string;\r\n  email: string;\r\n  mobile: number;\r\n  vip: boolean;\r\n  address: string;\r\n  postcode: number;\r\n}\r\n","import dayjs from \"dayjs\";\r\nimport { EfabricationStatus, IFabrication, ELogisticStatus, IOrderProduct } from \"./interfaces\";\r\nimport { fabricationStatus } from \"./productTypes\";\r\nimport { deductProduct } from \"@SRC/data/api.service\";\r\n\r\nexport type QueryStringType = {\r\n  [Key: string | number]: any;\r\n};\r\n\r\nexport const refineQueryString = (queryString: QueryStringType) => {\r\n  const response = { ...queryString }; //spread and pass the values to response\r\n\r\n  // equals to const result = Object.assign({}, object)\r\n  Object.keys(response).forEach((key: any) => {\r\n    const value: any = response[key]; // ?????? todo need help\r\n    // when value === null/undefined/false  but there is a problem that when value is 0, it will still return false,  so we need to deal with this, cuz 0 is still a valid value, and a valid value should not return false.\r\n    if (isVoid(value)) {\r\n      delete response[key]; // if there is no value, delete the key\r\n    }\r\n  });\r\n  return response;\r\n};\r\n\r\nexport const isVoid = (value: undefined | null | \"\") => {\r\n  if (value === undefined || value === null || value === \"\") {\r\n    return true;\r\n  } else return false;\r\n};\r\n\r\nexport const stockIndicator = (stockNumber: number): \"success\" | \"warning\" | \"error\" | \"processing\" | \"default\" => {\r\n  if (stockNumber >= 10) {\r\n    return \"processing\";\r\n  }\r\n  if (stockNumber >= 5) {\r\n    // if 10 > stockNumber > 5\r\n    return \"success\";\r\n  }\r\n  if (stockNumber >= 3) {\r\n    // if 5 > stockNumber > 1\r\n    return \"warning\";\r\n  }\r\n  if (stockNumber < 3) {\r\n    return \"error\";\r\n  } else {\r\n    return \"default\";\r\n  }\r\n};\r\n\r\n// interface IOrderStatus {\r\n//   orderStatus: \"pending\" | \"partiallyPayed\" | \"fullyPayed\" | \"machineProcessing\" | \"machineProcessFinished\" | \"powderCoating\" | \"powderCoatingFinished\" | \"ready\";\r\n// }\r\n\r\nexport const orderStatusIndicator = (\r\n  orderStatus: \"pending\" | \"partiallyPayed\" | \"fullyPayed\" | \"machineProcessing\" | \"machineProcessFinished\" | \"powderCoating\" | \"powderCoatingFinished\" | \"installing\" | \"ready\"\r\n) => {\r\n  switch (orderStatus) {\r\n    case \"pending\":\r\n      return \"error\";\r\n      break;\r\n    case \"partiallyPayed\":\r\n    case \"machineProcessing\":\r\n    case \"machineProcessFinished\":\r\n    case \"powderCoating\":\r\n    case \"powderCoatingFinished\":\r\n    case \"installing\":\r\n      return \"default\";\r\n      break;\r\n    case \"fullyPayed\":\r\n    case \"ready\":\r\n      return \"success\";\r\n      break;\r\n  }\r\n};\r\n\r\nexport const fabricationStatusIndicator = (fabricationStatus: EfabricationStatus) => {\r\n  switch (fabricationStatus) {\r\n    case \"pending\":\r\n      return \"error\";\r\n      break;\r\n    case \"machineProcessing\":\r\n    case \"machineProcessFinished\":\r\n    case \"powderCoating\":\r\n    case \"powderCoatingFinished\":\r\n    case \"waitingForInstallation\":\r\n    case \"installing\":\r\n      return \"processing\";\r\n      break;\r\n    case \"ready\":\r\n      return \"success\";\r\n      break;\r\n  }\r\n};\r\n\r\nconst teseDemo = (fabricationStatus: EfabricationStatus) => {\r\n  let status = EfabricationStatus.pending;\r\n};\r\n\r\nexport const logisticStatusIndicator = (logisticStatus: ELogisticStatus) => {\r\n  switch (logisticStatus) {\r\n    case \"waitingForCarrier\":\r\n      return \"error\";\r\n      break;\r\n    case \"pickupAlready\":\r\n      return \"processing\";\r\n      break;\r\n    case \"delivering\":\r\n      return \"processing\";\r\n      break;\r\n    case \"delivered\":\r\n      return \"success\";\r\n      break;\r\n    case \"cannotDeliver\":\r\n      return \"warning\";\r\n      break;\r\n    case \"returningToVender\":\r\n      return \"warning\";\r\n      break;\r\n    case \"returnedItemArrived\":\r\n      return \"success\";\r\n      break;\r\n    case \"itemDamagedInTransport\":\r\n      return \"error\";\r\n      break;\r\n  }\r\n};\r\n\r\nexport const CaculateTypeItems = (typeName: string | \"\" | null | undefined, products: any[]): number => {\r\n  let count = 0;\r\n  for (const item of products) {\r\n    if (item.type === typeName) {\r\n      count++;\r\n    } else count = count;\r\n  }\r\n\r\n  return count;\r\n};\r\n\r\nexport const debounce = (callback: Function, timer = 1000): Function => {\r\n  let delay: any;\r\n  return function (this: any, ...args: any) {\r\n    if (delay) {\r\n      clearTimeout(delay);\r\n    }\r\n    delay = setTimeout(() => {\r\n      callback.apply(args);\r\n    }, timer);\r\n  };\r\n};\r\n// howto:\r\n//   const debouncedApiCall = debounce(() => {\r\n//   getClients(queryParams).then((response: any) => {\r\n//     currentOrderRef.current.client = response\r\n//   })\r\n// })\r\n// debouncedApiCall(2000)\r\n\r\n/**\r\n * deduplicate\r\n * @param array\r\n * @returns array\r\n */\r\nexport const deduplicateArray = (array: [any]) => {\r\n  return Array.from(new Set(array));\r\n};\r\n\r\nexport const timeStamp = () => {\r\n  return dayjs().format(\"YYYY-MM-DD\");\r\n};\r\n\r\nexport const determineItemShouldbeDeduct = (orderFullyPayed: boolean, order: any) => {\r\n  if (orderFullyPayed) {\r\n    order.product.map((item: Omit<IOrderProduct, \"id\">) => {});\r\n  }\r\n};\r\n\r\n/**\r\n * determine if there is a shortage for each item in the products list and make apicall\r\n * @param products\r\n */\r\nexport const isShortage = (products: IOrderProduct[]): { sku: string }[] => {\r\n  let result: { sku: string }[] = [];\r\n  for (let item of products) {\r\n    if (item.currentInStock >= 1) {\r\n      //todo: means this order can be put through\r\n      result = [];\r\n    } else {\r\n      result.push({\r\n        sku: item.sku,\r\n      });\r\n    }\r\n  }\r\n  return result;\r\n};\r\n\r\nexport const deductFromCurrentStock = (product: IOrderProduct) => {\r\n  deductProduct(product);\r\n};\r\n"],"names":["Request","axiosInstance","this","axios","timeout","baseURL","headers","interceptRequest","interceptResponse","status","store","setIsloading","error","setError","interceptors","request","use","config","Storage","url","includes","response","data","code","statusText","toLocalLowerCase","Promise","resolve","reject","params","get","then","catch","Notification","type","message","messageTarget","finally","notification","constructor","name","post","patch","put","env","envSwitch","generateOrder","payload","dbUri","getOrderByParams","searchParams","setData","setLoadingStatus","formInstance","tempFunc","qs","refineQueryString","getOrdersById","updateOrderForPayment","orderId","paymentDetail","updateOrderForFabrication","fabricationStatus","updateOrderForLogistic","logisticStatus","updateOrderForLogisticInfo","logisticInfo","getClientsByParams","loadingStatus","setUiController","uiController","userInfo","length","userCreateOrEditSwitch","id","email","mobile","vip","address","postcode","setFieldsValue","client","debounce","debouncedTempFunc","manipulateUserInfo","funcSwitch","tempPayload","updatedAt","timeStamp","createdAt","searchProductBySku","sku","columnIndex","productSearch","currentFormValue","getFieldValue","currentColumn","size","price","pcPrice","powdercoatingPrice","installPrice","installationPrice","currentInStock","changedFormValue","map","item","index","products","setTimeout","deductProduct","product","AddToWatchingList","orderNumber","checked","getShortageItems","getProductData","queryData","putProductData","createNewProduct","getProductDataDeposits","ENVCONFIG","switchSelector","Error","paylaodMessage","EfabricationStatus","ELogisticStatus","ELogisticProvider","EPaymentStatus","queryString","Object","keys","forEach","key","value","isVoid","undefined","stockIndicator","stockNumber","orderStatusIndicator","orderStatus","fabricationStatusIndicator","logisticStatusIndicator","CaculateTypeItems","typeName","count","callback","delay","timer","args","clearTimeout","apply","dayjs","format","isShortage","result","push","deductFromCurrentStock"],"sourceRoot":""}