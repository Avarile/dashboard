{"version":3,"file":"static/js/907.ce2935a4.chunk.js","mappings":"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","sources":["components/Fabrication/SingleFabJobInList.Module.tsx","pages/FabricationIndex.tsx"],"sourcesContent":["import React from \"react\";\r\nimport { Steps, Button, message, Input } from \"antd\";\r\nimport styled from \"styled-components\";\r\nimport { LoadingOutlined, PayCircleOutlined } from \"@ant-design/icons\";\r\nimport { updateOrderForFabrication } from \"@SRC/data/api.service\";\r\n\r\nconst { TextArea } = Input;\r\nconst { Step } = Steps;\r\n\r\nconst steps = [\r\n  {\r\n    id: 0,\r\n    title: \"Waiting For Material\",\r\n    content: \"Shortage of Material, waiting for resupply\",\r\n    subtitle: \"Contact factory to resupply\",\r\n    percent: \"0%\",\r\n    value: \"pending\",\r\n  },\r\n  {\r\n    id: 1,\r\n    title: \"Machining items\",\r\n    content: \"During machining procedures\",\r\n    subtitle: \"Items is in the workshop\",\r\n    percent: \"15%\",\r\n    value: \"machineProcessing\",\r\n  },\r\n  {\r\n    id: 2,\r\n    title: \"Machine Finished\",\r\n    content: \"Ready for next procedure\",\r\n    subtitle: \"Items is in the workshop\",\r\n    percent: \"30%\",\r\n    value: \"machineProcessFinished\",\r\n  },\r\n  {\r\n    id: 3,\r\n    title: \"PowderCoating\",\r\n    content: \"During PowderCoating procedures, Normally this took 2~3 weeks\",\r\n    subtitle: \"Items is in the PowderCoating Factory\",\r\n    percent: \"45%\",\r\n    value: \"powderCoating\",\r\n  },\r\n  {\r\n    id: 4,\r\n    title: \"PowderCoating Finished\",\r\n    content: \"Ready for next procedure\",\r\n    subtitle: \"Items return from the factory to the workshop\",\r\n    percent: \"70%\",\r\n    value: \"powderCoatingFinished\",\r\n  },\r\n  {\r\n    id: 5,\r\n    title: \"Waiting for Installation\",\r\n    content: \"Contact clients to book in!\",\r\n    subtitle: \"Items is in the workshop, wainting to be installed\",\r\n    percent: \"85%\",\r\n    value: \"waitingForInstallation\",\r\n  },\r\n  {\r\n    id: 6,\r\n    title: \"Installing\",\r\n    content: \"During Installation procedures, Installation normally took 2days\",\r\n    subtitle: \"Installation\",\r\n    percent: \"90%\",\r\n    value: \"installing\",\r\n  },\r\n  {\r\n    id: 7,\r\n    title: \"Ready\",\r\n    content: \"Ready for pickup\",\r\n    subtitle: \"Everything is ready\",\r\n    percent: \"100%\",\r\n    value: \"ready\",\r\n  },\r\n];\r\n\r\nexport default function SingleFabJobInListModule({ order, getOrderByIdandSetdata }: any) {\r\n  const getCurrentFabIdOutofOrder = (): number => {\r\n    let id = 0;\r\n    for (let item of steps) {\r\n      if (item.value === order.fabricationStatus) {\r\n        id = item.id;\r\n        return id;\r\n      }\r\n    }\r\n    return id;\r\n  };\r\n\r\n  const [current, setCurrent] = React.useState<number>(getCurrentFabIdOutofOrder());\r\n  const [fabricationInfo, setFabricationInfo] = React.useState<string>(order.fabricationInfo);\r\n\r\n  const next = () => {\r\n    setCurrent(current + 1);\r\n  };\r\n\r\n  const prev = () => {\r\n    setCurrent(current - 1);\r\n  };\r\n\r\n  const updateFabStatus = async () => {\r\n    let payload = {\r\n      ...order,\r\n      fabricationStatus: steps[current].value,\r\n      fabricationInfo: fabricationInfo,\r\n    };\r\n    await updateOrderForFabrication(order.id, payload).then(getOrderByIdandSetdata());\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Steps current={current} size=\"small\">\r\n        {steps.map((item) => (\r\n          <Step key={item.title} title={item.title} description={item.subtitle} icon={current === item.id && <LoadingOutlined />} />\r\n        ))}\r\n      </Steps>\r\n      <StepContent>\r\n        <TextAreaContainer>\r\n          <TextAreaNew\r\n            autoSize={{ minRows: 20, maxRows: 10 }}\r\n            showCount\r\n            maxLength={2000}\r\n            rows={20}\r\n            value={fabricationInfo}\r\n            onChange={(event) => {\r\n              setFabricationInfo(event.target.value);\r\n            }}\r\n          />\r\n        </TextAreaContainer>\r\n        <TextAreaContainer>\r\n          <TextAreaNew autoSize={{ minRows: 20, maxRows: 10 }} rows={20} maxLength={2000} value={steps[current].content} showCount />\r\n        </TextAreaContainer>\r\n      </StepContent>\r\n      <StepAction>\r\n        {current < steps.length - 1 && (\r\n          <Button type=\"primary\" onClick={() => next()} style={{ width: \"6rem\" }}>\r\n            Next\r\n          </Button>\r\n        )}\r\n        {current === steps.length - 1 && (\r\n          <Button type=\"primary\" onClick={() => message.success(\"Processing complete!\")} style={{ width: \"6rem\" }}>\r\n            Production Finished\r\n          </Button>\r\n        )}\r\n        {current > 0 && (\r\n          <Button style={{ margin: \"0 8px\", width: \"6rem\" }} onClick={() => prev()}>\r\n            Previous\r\n          </Button>\r\n        )}\r\n        <Button\r\n          danger\r\n          type=\"primary\"\r\n          style={{ margin: \"0 8px\" }}\r\n          onClick={() => {\r\n            updateFabStatus();\r\n          }}>\r\n          Comfirm Status Change\r\n        </Button>\r\n      </StepAction>\r\n    </>\r\n  );\r\n}\r\n\r\nconst StepContent = styled.div`\r\n  min-height: 200px;\r\n  margin-top: 16px;\r\n  background-color: #fafafa;\r\n  border: 1px dashed #e9e9e9;\r\n  border-radius: 2px;\r\n  display: grid;\r\n  grid-template-columns: 2fr 3fr;\r\n  grid-template-rows: 1fr;\r\n  grid-column-gap: 10px;\r\n  grid-row-gap: 0px;\r\n`;\r\n\r\nconst StepAction = styled.div`\r\n  margin-top: 24px;\r\n`;\r\n\r\nconst TextAreaContainer = styled.div``;\r\n\r\nconst TextAreaNew = styled(TextArea)`\r\n  flex: 0 1 auto;\r\n  margin: 2rem;\r\n  width: 90%;\r\n  height: 200;\r\n  align-items: center;\r\n  resize: none;\r\n`;\r\n\r\nconst DisplayContentContainer = styled.p`\r\n  margin: 2rem;\r\n`;\r\n","import { Table, Input, Badge } from \"antd\";\r\nimport \"@SRC/pages/pages.css\";\r\nimport { fabricationStatusIndicator } from \"@SRC/utils/utilFuncs\";\r\nimport SingleFabJobInListModule from \"@SRC/components/Fabrication/SingleFabJobInList.Module\";\r\nimport { getOrdersById, updateOrderForFabrication } from \"@SRC/data/api.service\";\r\nimport React, { useState, useEffect } from \"react\";\r\n\r\nconst { Search } = Input;\r\n\r\nconst columns = [\r\n  { title: \"Order Number\", dataIndex: \"id\", key: \"orderNumber\" },\r\n  { title: \"OrderAmount\", dataIndex: \"pricetotalAmount\", key: \"orderAmount\" },\r\n  {\r\n    title: \"Balance Due\",\r\n    dataIndex: \"balanceDue\",\r\n    key: \"balanceDue\",\r\n  },\r\n  {\r\n    title: \"Fabrication Status\",\r\n    dataIndex: \"fabricationStatus\",\r\n    key: \"fabricationStatus\",\r\n    render: (currentRowValue: any, currentColumnValue: any, index: number) => (\r\n      <span>\r\n        <Badge status={fabricationStatusIndicator(currentRowValue)} />\r\n        {currentRowValue}\r\n      </span>\r\n    ),\r\n  },\r\n];\r\n\r\nconst FabricationIndex = () => {\r\n  const [data, setData] = useState<any>([]);\r\n  const [searchParams, setSearchParams] = useState<any>({ orderId: \"\" });\r\n  const [loadingStatus, setLoadingState] = useState(false);\r\n  // const [loadingStatus, setLoadingStatus] = useState<boolean>(false); // I use this as a triggger to refresh the component if I updated the Amount payed, that's why I did the prop drilling\r\n\r\n  const getOrderByIdandSetdata = () => {\r\n    setLoadingState(true);\r\n    getOrdersById(searchParams)\r\n      .then((response: any) => {\r\n        setData(response);\r\n      })\r\n      .finally(() => {\r\n        setTimeout(() => {\r\n          setLoadingState(false);\r\n        }, 1000);\r\n      });\r\n  };\r\n  useEffect(() => {\r\n    getOrderByIdandSetdata();\r\n  }, [searchParams]);\r\n  // console.log(data);\r\n\r\n  return (\r\n    <>\r\n      {/* <h3>Fabrication Page</h3> */}\r\n      <div style={{ width: \"100%\", display: \"flex\", flexDirection: \"column\" }}>\r\n        <Search\r\n          style={{ minWidth: \"15rem\", maxWidth: \"20rem\", marginBottom: \"5rem\", alignSelf: \"flex-end\", marginRight: \"8rem\" }}\r\n          enterButton=\"search by OrderId\"\r\n          allowClear\r\n          loading={false}\r\n          onSearch={(value) => {\r\n            setSearchParams(value);\r\n          }}\r\n        />{\" \"}\r\n        <h3>Order Fabrication Status</h3>\r\n        <Table\r\n          loading={loadingStatus}\r\n          rowClassName={(record, index) => {\r\n            if (index % 2 === 0) {\r\n              return \"warehousing-oddRow\";\r\n            } else return \"warehousing-evenRow\";\r\n          }}\r\n          columns={columns}\r\n          expandable={{\r\n            expandedRowRender: (record) => <SingleFabJobInListModule order={record} getOrderByIdandSetdata={getOrderByIdandSetdata} />,\r\n            // rowExpandable: (record) => record.name !== \"Not Expandable\",\r\n          }}\r\n          dataSource={data}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default FabricationIndex;\r\n"],"names":["TextArea","Input","Step","Steps","steps","id","title","content","subtitle","percent","value","SingleFabJobInListModule","order","getOrderByIdandSetdata","React","item","fabricationStatus","getCurrentFabIdOutofOrder","current","setCurrent","fabricationInfo","setFabricationInfo","updateFabStatus","payload","updateOrderForFabrication","then","size","map","description","icon","LoadingOutlined","StepContent","TextAreaContainer","TextAreaNew","autoSize","minRows","maxRows","showCount","maxLength","rows","onChange","event","target","StepAction","length","type","onClick","style","width","message","margin","danger","styled","Search","columns","dataIndex","key","render","currentRowValue","currentColumnValue","index","status","fabricationStatusIndicator","useState","data","setData","orderId","searchParams","setSearchParams","loadingStatus","setLoadingState","getOrdersById","response","finally","setTimeout","useEffect","display","flexDirection","minWidth","maxWidth","marginBottom","alignSelf","marginRight","enterButton","allowClear","loading","onSearch","rowClassName","record","expandable","expandedRowRender","dataSource"],"sourceRoot":""}